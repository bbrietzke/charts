
image:
  repository: tootsuite/mastodon
mastodon:
  createAdmin:
    enabled: false
  cron:
    removeMedia:
      enabled: true
      schedule: "0 0 * * 0"
  locale: en
  local_domain: faultycloud.social
  web_domain: faultycloud.social
  alternate_domains:
    - mastodon.faultycloud.work
  persistence:
    assets:
      accessMode: ReadWriteOnce
      storageClassName: "nfs-client"
      resources:
        requests:
          storage: 10Gi
    system:
      accessMode: ReadWriteOnce
      storageClassName: "nfs-client"
      resources:
        requests:
          storage: 100Gi
  s3:
    enabled: false
  secrets:
    secret_key_base: "mYq3t6w9z$C&F)H@"
    otp_secret: "x!A%D*G-KaPdSgVk"
    vapid:
      private_key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUdxQWdFQUFpRUExVFBnZEI4cXFhZm1ramVjSWpiTGZ2SmtVb0RzeHlnVlE0TzVCWDViOHdrQ0F3RUFBUUlnCkF1T0pEd205RWo5c0tGOElobzRuZzdLQVV1TmRadWREMGtiVG9vV0EvZUVDRVFEcWxmdnRpZjJOSFhoUHBtQXkKZ2JnREFoRUE2S293bkljSTFpVjV1Q0ptc3ArWkF3SVFQRzl2ZS83MDU0b1VHTkVRTDNMajZRSVJBTXVQazZadgpjcWpCOHdQS2ZXWE13dmNDRUhZeFJlZzVOZ2xiZEluZ1A4di85cXM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"
      public_key: "LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1DZ0NJUURWTStCMEh5cXBwK2FTTjV3aU5zdCs4bVJTZ096SEtCVkRnN2tGZmx2ekNRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0="
  sidekiq:
    # -- Pod security context for all Sidekiq Pods, overwrites .Values.podSecurityContext
    podSecurityContext: {}
    # -- (Sidekiq Container) Security Context for all Pods, overwrites .Values.securityContext
    securityContext: {}
    # -- Resources for all Sidekiq Deployments unless overwritten
    resources:
      limits:
        cpu: "1"
        memory: 768Mi
      requests:
        cpu: 250m
        memory: 512Mi
    workers:
    - name: all-queues
      # -- Number of threads / parallel sidekiq jobs that are executed per Pod
      concurrency: 25
      # -- Number of Pod replicas deployed by the Deployment
      replicas: 1
      # -- Resources for this specific deployment to allow optimised scaling, overwrites .Values.mastodon.sidekiq.resources
      resources: {}
      # -- Affinity for this specific deployment, overwrites .Values.affinity and .Values.mastodon.sidekiq.affinity
      affinity: {}
      # -- Sidekiq queues for Mastodon that are handled by this worker. See https://docs.joinmastodon.org/admin/scaling/#concurrency
      # See https://github.com/mperham/sidekiq/wiki/Advanced-Options#queues for how to weight queues as argument
      queues:
        - default,8
        - push,6
        - ingress,4
        - mailers,2
        - pull
        - scheduler 
  smtp:
    auth_method: plain
    ca_file: /etc/ssl/certs/ca-certificates.crt
    delivery_method: smtp
    enable_starttls: 'auto'
    from_address: bbrietzke@gmail.com
    openssl_verify_mode: peer
    port: 587
    reply_to:
    server: smtp.gmail.com
    tls: false
    login: bbrietzke@gmail.com 
    password: dydxdxxgjpjcpuoz
  streaming:
    port: 4000
    workers: 1
    base_url: null
    replicas: 1
    resources: 
      limits:
        cpu: "500m"
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 128Mi
  web:
    port: 3000
    # -- Number of Web Pods running
    replicas: 1
    resources: 
      limits:
        cpu: "1"
        memory: 1280Mi
      requests:
        cpu: 250m
        memory: 768Mi
    # -- Puma-specific options. Below values are based on default behavior in
    # config/puma.rb when no custom values are provided.
    minThreads: "5"
    maxThreads: "5"
    workers: "2"
    persistentTimeout: "20"

  # Sets the PREPARED_STATEMENTS environment variable: https://docs.joinmastodon.org/admin/config/#prepared_statements
  preparedStatements: true

ingress:
  enabled: true
  annotations:
    # kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: "cluster-letsencrypt-issuer"
  ingressClassName: nginx
  hosts:
    - host: faultycloud.social
      paths:
        - path: '/'
    - host: mastodon.faultycloud.work
      paths:
        - path: '/'
  tls:
    - secretName: mastodon-tls
      hosts:
        - faultycloud.social
        - mastodon.faultycloud.work

# -- https://github.com/bitnami/charts/tree/master/bitnami/elasticsearch#parameters
elasticsearch:
  enabled: false

# https://github.com/bitnami/charts/tree/master/bitnami/postgresql#parameters
postgresql:
  # -- disable if you want to use an existing db; in which case the values below
  # must match those of that external postgres instance
  enabled: false
  postgresqlHostname: 10.0.0.193
  postgresqlPort: 5432
  auth:
    database: mastodon_production
    username: mastodon_user
    # you must set a password; the password generated by the postgresql chart will
    # be rotated on each upgrade:
    # https://github.com/bitnami/charts/tree/master/bitnami/postgresql#upgrade
    password: ""
    # Set the password for the "postgres" admin user
    # set this to the same value as above if you've previously installed
    # this chart and you're having problems getting mastodon to connect to the DB
    # postgresPassword: ""
    # you can also specify the name of an existing Secret
    # with a key of password set to the password you want
    existingSecret: "postgres-credentials"

# https://github.com/bitnami/charts/tree/master/bitnami/redis#parameters
redis:
  # disable if you want to use an existing redis instance; in which case the
  # values below must match those of that external redis instance
  enabled: false
  hostname: "10.0.0.102"
  port: 6379
  auth:
    existingSecret: "redis-credentials"

serviceAccount:
  create: true

# If set to true, an annotation with the current chart release number will be added to all mastodon pods. This will
# cause all pods to be recreated every `helm upgrade` regardless of whether their config or spec changes.
revisionPodAnnotation: true

