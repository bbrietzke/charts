---
# Source: mastodon/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-mastodon
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: mastodon/templates/secret-smtp.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mastodon-smtp
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  login: YmJyaWV0emtlQGdtYWlsLmNvbQ==
  password: ZHlkeGR4eGdqcGpjcHVveg==
---
# Source: mastodon/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-mastodon
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  SECRET_KEY_BASE: "bVlxM3Q2dzl6JEMmRilIQA=="
  OTP_SECRET: "eCFBJUQqRy1LYVBkU2dWaw=="
  VAPID_PRIVATE_KEY: "TFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWR4UVdkRlFVRnBSVUV4VkZCblpFSTRjWEZoWm0xcmFtVmpTV3BpVEdaMlNtdFZiMFJ6ZUhsblZsRTBUelZDV0RWaU9IZHJRMEYzUlVGQlVVbG5Da0YxVDBwRWQyMDVSV281YzB0R09FbG9ielJ1WnpkTFFWVjFUbVJhZFdSRU1HdGlWRzl2VjBFdlpVVkRSVkZFY1d4bWRuUnBaakpPU0Zob1VIQnRRWGtLWjJKblJFRm9SVUUyUzI5M2JrbGpTVEZwVmpWMVEwcHRjM0FyV2tGM1NWRlFSemwyWlM4M01EVTBiMVZIVGtWUlRETk1halpSU1ZKQlRYVlFhelphZGdwamNXcENPSGRRUzJaWFdFMTNkbU5EUlVoWmVGSmxaelZPWjJ4aVpFbHVaMUE0ZGk4NWNYTTlDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0"
  VAPID_PUBLIC_KEY: "TFMwdExTMUNSVWRKVGlCU1UwRWdVRlZDVEVsRElFdEZXUzB0TFMwdENrMURaME5KVVVSV1RTdENNRWg1Y1hCd0syRlRUalYzYVU1emRDczRiVkpUWjA5NlNFdENWa1JuTjJ0R1pteDJla05SU1VSQlVVRkNDaTB0TFMwdFJVNUVJRkpUUVNCUVZVSk1TVU1nUzBWWkxTMHRMUzA9"
---
# Source: mastodon/templates/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-mastodon-env
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
data:
  DB_HOST: 10.0.0.193
  DB_PORT: "5432"
  DB_NAME: mastodon_production
  DB_POOL: "25"
  DB_USER: mastodon_user
  PREPARED_STATEMENTS: "true"
  DEFAULT_LOCALE: en
  LOCAL_DOMAIN: faultycloud.social
  WEB_DOMAIN: faultycloud.social
  ALTERNATE_DOMAINS: faultycloud.work
  # https://devcenter.heroku.com/articles/tuning-glibc-memory-behavior
  MALLOC_ARENA_MAX: "2"
  NODE_ENV: "production"
  RAILS_ENV: "production"
  REDIS_HOST: 10.0.0.102
  REDIS_PORT: "6379"
  SMTP_AUTH_METHOD: plain
  SMTP_CA_FILE: /etc/ssl/certs/ca-certificates.crt
  SMTP_DELIVERY_METHOD: smtp
  SMTP_ENABLE_STARTTLS: "auto"
  SMTP_FROM_ADDRESS: bbrietzke@gmail.com
  SMTP_OPENSSL_VERIFY_MODE: peer
  SMTP_PORT: "587"
  SMTP_SERVER: smtp.gmail.com
  STREAMING_CLUSTER_NUM: "1"
---
# Source: mastodon/templates/pvc-assets.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-mastodon-assets
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: "nfs-client"
---
# Source: mastodon/templates/pvc-system.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-mastodon-system
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: "nfs-client"
---
# Source: mastodon/templates/service-streaming.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mastodon-streaming
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 4000
      targetPort: streaming
      protocol: TCP
      name: streaming
  selector:
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: streaming
---
# Source: mastodon/templates/service-web.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-mastodon-web
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: web
---
# Source: mastodon/templates/deployment-sidekiq.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mastodon-sidekiq-all-queues
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: sidekiq-all-queues
    app.kubernetes.io/part-of: rails
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: sidekiq-all-queues
      app.kubernetes.io/part-of: rails
  template:
    metadata:
      annotations:
        # roll the pods to pick up any db migrations or other changes
        
        rollme: "1"
        checksum/config-secrets: "6f87d238913b8c6261003f6a5bfb7e0903bf243211bbb6e3ca31d259b3a6a4e7"
        checksum/config-configmap: "b53166c45249cb5205ecc0a31aecea8f950c9fb82b2e74d46a99aa4e6e884813"
        checksum/config-secrets: "cacb51583febadec4e31a9c7d62a83cd5eb1437f07a9d5c84dfe1a601674cae4"
      labels:
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: sidekiq-all-queues
        app.kubernetes.io/part-of: rails
    spec:
      serviceAccountName: release-name-mastodon
      securityContext:
        fsGroup: 991
        runAsGroup: 991
        runAsUser: 991
      volumes:
        - name: assets
          persistentVolumeClaim:
            claimName: release-name-mastodon-assets
        - name: system
          persistentVolumeClaim:
            claimName: release-name-mastodon-system
      containers:
        - name: mastodon
          securityContext:
            {}
          image: "tootsuite/mastodon:v4.1.0"
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - sidekiq
            - -c
            - "25"
            - -q
            - "default,8"
            - -q
            - "push,6"
            - -q
            - "ingress,4"
            - -q
            - "mailers,2"
            - -q
            - "pull"
            - -q
            - "scheduler"
          envFrom:
            - configMapRef:
                name: release-name-mastodon-env
            - secretRef:
                name: release-name-mastodon
          env:
            - name: "DB_PASS"
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: redis-password
            - name: "SMTP_LOGIN"
              valueFrom:
                secretKeyRef:
                  name: release-name-mastodon-smtp
                  key: login
                  optional: true
            - name: "SMTP_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: release-name-mastodon-smtp
                  key: password
          volumeMounts:
            - name: assets
              mountPath: /opt/mastodon/public/assets
            - name: system
              mountPath: /opt/mastodon/public/system
          resources:
            limits:
              cpu: "1"
              memory: 768Mi
            requests:
              cpu: 250m
              memory: 512Mi
---
# Source: mastodon/templates/deployment-streaming.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mastodon-streaming
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: streaming
  template:
    metadata:
      annotations:
        # roll the pods to pick up any db migrations or other changes
        
        rollme: "1"
        checksum/config-secrets: "6f87d238913b8c6261003f6a5bfb7e0903bf243211bbb6e3ca31d259b3a6a4e7"
        checksum/config-configmap: "b53166c45249cb5205ecc0a31aecea8f950c9fb82b2e74d46a99aa4e6e884813"
      labels:
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: streaming
    spec:
      serviceAccountName: release-name-mastodon
      securityContext:
        fsGroup: 991
        runAsGroup: 991
        runAsUser: 991
      containers:
        - name: mastodon-streaming
          image: "tootsuite/mastodon:v4.1.0"
          imagePullPolicy: IfNotPresent
          command:
            - node
            - ./streaming
          envFrom:
            - configMapRef:
                name: release-name-mastodon-env
          env:
            - name: "DB_PASS"
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: redis-password
            - name: "PORT"
              value: "4000"
          ports:
            - name: streaming
              containerPort: 4000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/v1/streaming/health
              port: streaming
          readinessProbe:
            httpGet:
              path: /api/v1/streaming/health
              port: streaming
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 128Mi
---
# Source: mastodon/templates/deployment-web.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-mastodon-web
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: web
      app.kubernetes.io/part-of: rails
  template:
    metadata:
      annotations:
        # roll the pods to pick up any db migrations or other changes
        
        rollme: "1"
        checksum/config-secrets: "6f87d238913b8c6261003f6a5bfb7e0903bf243211bbb6e3ca31d259b3a6a4e7"
        checksum/config-configmap: "b53166c45249cb5205ecc0a31aecea8f950c9fb82b2e74d46a99aa4e6e884813"
      labels:
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/component: web
        app.kubernetes.io/part-of: rails
    spec:
      serviceAccountName: release-name-mastodon
      securityContext:
        fsGroup: 991
        runAsGroup: 991
        runAsUser: 991
      volumes:
        - name: assets
          persistentVolumeClaim:
            claimName: release-name-mastodon-assets
        - name: system
          persistentVolumeClaim:
            claimName: release-name-mastodon-system
      containers:
        - name: mastodon-web
          image: "tootsuite/mastodon:v4.1.0"
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - puma
            - -C
            - config/puma.rb
          envFrom:
            - configMapRef:
                name: release-name-mastodon-env
            - secretRef:
                name: release-name-mastodon
          env:
            - name: "DB_PASS"
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: redis-password
            - name: "PORT"
              value: "3000"
            - name: "MIN_THREADS"
              value: "5"
            - name: "MAX_THREADS"
              value: "5"
            - name: "WEB_CONCURRENCY"
              value: "2"
            - name: "PERSISTENT_TIMEOUT"
              value: "20"
          volumeMounts:
            - name: assets
              mountPath: /opt/mastodon/public/assets
            - name: system
              mountPath: /opt/mastodon/public/system
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          startupProbe:
            httpGet:
              path: /health
              port: http
            failureThreshold: 30
            periodSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 1280Mi
            requests:
              cpu: 250m
              memory: 768Mi
---
# Source: mastodon/templates/cronjob-media-remove.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: release-name-mastodon-media-remove
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: 0 0 * * 0
  jobTemplate:
    spec:
      template:
        metadata:
          name: release-name-mastodon-media-remove
        spec:
          restartPolicy: OnFailure
          # ensure we run on the same node as the other rails components; only
          # required when using PVCs that are ReadWriteOnce
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app.kubernetes.io/part-of
                        operator: In
                        values:
                          - rails
                  topologyKey: kubernetes.io/hostname
          volumes:
            - name: assets
              persistentVolumeClaim:
                claimName: release-name-mastodon-assets
            - name: system
              persistentVolumeClaim:
                claimName: release-name-mastodon-system
          containers:
            - name: release-name-mastodon-media-remove
              image: "tootsuite/mastodon:v4.1.0"
              imagePullPolicy: IfNotPresent
              command:
                - bin/tootctl
                - media
                - remove
              envFrom:
                - configMapRef:
                    name: release-name-mastodon-env
                - secretRef:
                    name: release-name-mastodon
              env:
                - name: "DB_PASS"
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: password
                - name: "REDIS_PASSWORD"
                  valueFrom:
                    secretKeyRef:
                      name: redis-credentials
                      key: redis-password
                - name: "PORT"
                  value: "3000"
              volumeMounts:
                - name: assets
                  mountPath: /opt/mastodon/public/assets
                - name: system
                  mountPath: /opt/mastodon/public/system
---
# Source: mastodon/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-mastodon
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: cluster-letsencrypt-issuer
    kubernetes.io/tls-acme: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "faultycloud.social"
        - "mastodon.faultycloud.work"
      secretName: mastodon-tls
  rules:
    - host: "faultycloud.social"
      http:
        paths:
          - path: /
            backend:
              service:
                name: release-name-mastodon-web
                port:
                  number: 3000
            pathType: Prefix
          - path: /api/v1/streaming
            backend:
              service:
                name: release-name-mastodon-streaming
                port:
                  number: 4000
            pathType: Prefix
    - host: "mastodon.faultycloud.work"
      http:
        paths:
          - path: /
            backend:
              service:
                name: release-name-mastodon-web
                port:
                  number: 3000
            pathType: Prefix
          - path: /api/v1/streaming
            backend:
              service:
                name: release-name-mastodon-streaming
                port:
                  number: 4000
            pathType: Prefix
---
# Source: mastodon/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-mastodon-test-connection"
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-mastodon-web:80']
  restartPolicy: Never
---
# Source: mastodon/templates/job-assets-precompile.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-mastodon-assets-precompile
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-2"
spec:
  template:
    metadata:
      name: release-name-mastodon-assets-precompile
    spec:
      restartPolicy: Never
      # ensure we run on the same node as the other rails components; only
      # required when using PVCs that are ReadWriteOnce
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/part-of
                    operator: In
                    values:
                      - rails
              topologyKey: kubernetes.io/hostname
      volumes:
        - name: assets
          persistentVolumeClaim:
            claimName: release-name-mastodon-assets
        - name: system
          persistentVolumeClaim:
            claimName: release-name-mastodon-system
      containers:
        - name: release-name-mastodon-assets-precompile
          image: "tootsuite/mastodon:v4.1.0"
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - -c
            - |
                bundle exec rake assets:precompile && yarn cache clean
          envFrom:
            - configMapRef:
                name: release-name-mastodon-env
            - secretRef:
                name: release-name-mastodon
          env:
            - name: "DB_PASS"
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: redis-password
            - name: "PORT"
              value: "3000"
          volumeMounts:
            - name: assets
              mountPath: /opt/mastodon/public/assets
            - name: system
              mountPath: /opt/mastodon/public/system
---
# Source: mastodon/templates/job-db-migrate.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-mastodon-db-migrate
  labels:
    helm.sh/chart: mastodon-4.1.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v4.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-2"
spec:
  template:
    metadata:
      name: release-name-mastodon-db-migrate
    spec:
      restartPolicy: Never
      # ensure we run on the same node as the other rails components; only
      # required when using PVCs that are ReadWriteOnce
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/part-of
                    operator: In
                    values:
                      - rails
              topologyKey: kubernetes.io/hostname
      volumes:
        - name: assets
          persistentVolumeClaim:
            claimName: release-name-mastodon-assets
        - name: system
          persistentVolumeClaim:
            claimName: release-name-mastodon-system
      containers:
        - name: release-name-mastodon-db-migrate
          image: "tootsuite/mastodon:v4.1.0"
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - rake
            - db:migrate
          envFrom:
            - configMapRef:
                name: release-name-mastodon-env
            - secretRef:
                name: release-name-mastodon
          env:
            - name: "DB_PASS"
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: redis-password
            - name: "PORT"
              value: "3000"
          volumeMounts:
            - name: assets
              mountPath: /opt/mastodon/public/assets
            - name: system
              mountPath: /opt/mastodon/public/system
